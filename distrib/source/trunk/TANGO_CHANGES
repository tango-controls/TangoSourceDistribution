TANGO history file

11/2016        *******************************************************
               *                                                     *
               *  Tango release 9.2.5 : Changes since version 9.2.2  *
               *                                                     *
               *******************************************************

- Add automatic even unsubscription in DeviceProxy class destructor

Bug fixes
---------

Bug recorded in SourceForge:

- 787 : Event errors persisting after server restart
- 788 : Dead lock in event system
- 789 : Device not switching to ALARM
- 790 : Wrong full name passed to event callback
- 791 : Wrong usage of omni_mutex
- 792 : Calls to asynchronous methods not thread safe
- 793 : API_AsynReplyNotArrived exception thrown when asyn call response is 
        received in the last 20 ms before the timeout expiration
- 795 : Compilation pb with gcc >= 5.3
- 798 : memory leak in DeviceData for old compiler (not supporting C++11)
- 799 : read value for attribute xxx has not been updated
- 801 : Memory leak for R/W spectrum string attribute 
- 802 : DevicePipeBlob
- 804 : init_device & DeviceProxy to an external device with same name 
- 805 : Missing check in Dserver::zmq_event_subscription_change() method 
- 813 : Segfault when pushing a change event with invalid quality 
- 814 : Segmentation fault when reading attribute
- 822 : Swapped origin and desc in some versions of Tango::Except::throw_exception

Other bugs

- Dynamic attributes polled by code when created after classical DS startup sequence
- Polled attributes changing their own polling period

03/2016        *******************************************************
               *                                                     *
               *  Tango release 9.2.2 : Changes since version 9.2.1  *
               *                                                     *
               *******************************************************

Bug fixes
---------

Bug recorded in SourceForge:

- 784 : DevULong memorized attribute
- 785 : Db and DS crash in case no DNS is available


03/2016        *******************************************************
               *                                                     *
               *  Tango release 9.2.1 : Changes since version 9.1.0  *
               *                                                     *
               *******************************************************

Tango 9.2 has been developed and tested using:

- omniORB 4.2.1
- zmq 4.0.5
- log4tango 5.0.1

Changes in Tango itself
-----------------------

- Apply changes sent by Szeged university for better code
- Improve way TANGO_HOST is used when the host name specified in TANGO_HOST is a host alias name
- Method DeviceClass::get_pipe_list() with device name as arg. is now case independant

Bug fixes
---------

Bug recorded in SourceForge:

- 741 : Device_4Impl and Tango 9 compatibility
- 745 : Missing method for data ready event
- 748 : Memory leak in DeviceProxy assignment operator
- 749 : User dev_state() method not called + hide att exception in state method
- 752 : ZmqEventSupplier::push_event() from multiple threads
- 753 : Server crash when polling thread is late and IDL 4 clients
- 761 : Crash when pushing events from my own thread
- 765 : Asyn re-connection after admin device DevRestart command
- 767 : push_change_event("State") crashes device server process
- 783 : Tango server NO_SYNC serial mode

Other bugs

- Crash using asyn calls when returning error using omniORB 4.2.1
- Memory leak in DeviceProxy::get_command_config()
- It's now possible to read write only attribute of type DevState even before any value has been written
- Bug in DeviceProxy::write_attribute() family methods in case of DeviceProxy created while the DS is not
running and write_attribute being the first call
- Bug in case of forwarded enumerated attribute (enum labels not forwarded)
- Several pipe related bugs (get_data_elt_nb() method crashing process - Pipe defined at class level
  instead of device level - Not possible to insert data in pipe/blob using DataElement class if no previous
  call to set_data_elt_nb() method)


09/2015        *******************************************************
               *                                                     *
               *  Tango release 9.1.0 : Changes since version 8.1.2  *
               *                                                     *
               *******************************************************

Tango 9.1 has been developed and tested using:

- omniORB 4.2.0
- zmq 4.0.5
- log4tango 5.0.1

Please note that omniORB 4.2.0 on Windows has a bug preventing timeout to work correctly.
There is a required change described in http://www.omniorb-support.com/pipermail/omniorb-list/2014-November/031621.html
Do not use the omniORB libraries distributed from omniORB site. Use those provided by Tango Windows binary
distribution (which include the bug fix)

Changes between Log4tango 5.0.0 and Log4Tango 5.0.1
---------------------------------------------------

- Small Windows specific change to support new Windows compiler

Changes in Tango itself
-----------------------

- Add device pipe
- Add forwarded attribute
- Add enumeration data type for attribute
- Add device interface change event (FR 90)
- Add dynamic command (FR 44)
- New polling algorithm
- Add memorized attribute information in attribute config (FR 20)
- New method DeviceProxy::write_read_attributes(). Note the ending s meaning plurial.
- Attribute "unit" property library default value is now an empty string
- Only one reference doc generated for all Tango classes (client and server). Tango book chapter 6 
is removed.
- Add method DeviceImpl::is_there_subscriber() (FR 89)
- Change logging system maximum and default logging file size (FR 112)
- Use template explicit instantiation
- Code re-factoring for 
    . attribute configuration storage in DB
    . Event compatibility
    . KeepAliveThread (on client)
- Solve memory pb due to event re-connection when nothing is sent on ZMQ sockets between re-connection
- Optimize group calls in case of disconnected group members 
- Replace many "#define" by "const int" or "const char *" in Tango namespace
- Added a Tango::string_free() call
- Windows: Add a WSAStartup() call for pure client
- Event: During bind action, ask for ephemeral port number to ZMQ
- In Attribute::set_value() method family: Add test on data size before testing given pointer validity
- If not already installed, install SIGINT and SIGTERM signal handler in pure client for faster device
unlocking (in case some device is locked)
- Messsage "Failed to narrow the EventChannelfactory..." printed by DS to cout5 (FR 91)
- Better management of the admin device in Util::get_device_by_name()
- svr_starting flag now reset in Util::server_run() (instead of end of admin device creation)
- Better support of host alias when used in device fqdn
- Better support of DS without db when they embed several Tango classes
- Add methods DeviceProxy::get_command_list() and DeviceProxy::get_command_config() for better compatibility
between command an attribute
- Client using event: ORB shutdown an destroyed at process exit
- Remove possible deadlock in server side when using DeviceImpl class polling related methods
- Increase ORB maxGIOPConnectionPerServer to 128
- Change in attribute name passed to event callback in case of CS with multiple DB servers and in case of
CS with TANGO_HOST defined using a host alias
- It's supported to specify a host name When using ORBendPoint command line option
- Added DeviceData and DeviceAttribute state() methods
- First sync. event also for periodic event
- Also manage alternate address(es) for events for DS running on host with several NIC
- Databaase::add_server() method also manages the admin device


Bug fixes
---------

Bug recorded in sourceForge:

- 620 : IP address specification from omniORB configuration file
- 621 : INcompatibility between ZMQ events
- 627 : DeviceAttribute data format field when using event
- 631 : Event reconnection
- 632 : Seg fault during event reconnection (with Tango 7/8 devices)
- 633 : DevRestart with dynamic attribute when polling is configured via code
- 638 : Missing events after two consecutive re-connection
- 642 : Client crash during re-connection
- 643 : Compilation clash on Windows (about NO_DATA)
- 646 : ZMQ event for device name when using FQDN
- 652 : Bug in signal managementwhen using your own signal handler
- 667 : Subscribing to event does not report error when polling is stopped on server side
- 668 : Inconsistency between stateless and non-stateless event subscription
- 676 : Event notification stopped after a while
- 682 : AttributeProxy created by alias and put_property() method
- 699 : Memory leak in callback calls when using asynchronous PUSH methods
- 707 : Wron dates from attribute_history() call
- 720 : Event with no-db device
- 725 : Hang in client when doing event subscription within the event callback
- 732 : GCC 5.2 compatibility


Other bugs

- In DbServerData class: Device attribute properties were not correctly copied
- In admin device polling_threads_pool_conf property when property size is > 255 chars
- Memory leak in server side during command ZmqEventSubscriptionChange in case of wrongly configured event
- In polling thread tuning algorithm
- Server side: In case one ORB is already created, also destroy db related objects stored in ApiUtil
- When using C++11: No event in case of CS with multiple DB servers if the server is started with
TANGO_HOST set to one DB server while the client is started with TANGO_HOST set to other DB server
- Fix valgrind complaining about uninitialized bytes when pushing events
- For float or double attribute: bug preventing events to be fired when attribute value is NaN
- During re-connection when remote device has alternate address(es) in its IOR 



06/2013        *******************************************************
               *                                                     *
               *  Tango release 8.1.2 : Changes since version 8.0.5  *
               *                                                     *
               *******************************************************

Tango 8.1 has been developed and tested using:

- omniORB 4.1.6
- zmq 3.2.2
- log4tango 5.0.0

Changes between Log4tango 4.0.7 and Log4Tango 5.0.0
---------------------------------------------------

- Small changes to allow Tango doc generation with a "make pdf" command
- Created a release 5 to handle a compatibility problem of timestamp buggy in release < 4.0.6 (SF Bug 613)

Changes in Tango itself
-----------------------

- Add event propagation using multicasting
- Add a DeviceImpl::write_attr_hardware() method (Feature request 68)
- Add a new EventConfirmSubscription command to admin device to optimize event heartbeat system
- Add a new define (TANGO_BASE_CLASS) to make next Tango inheritance change transparent
- Add class DbServerData with methods to ease moving device server from one CS to another
- Improve TAC device filters. It is now possible to use one wildcard per field (sr/v-*/*)
- Memorize error for memorized attribute which failed during device server startup sequence
- Change the way Tango device server retrieve host IP address(es)
- New methods in Database class: get_device_from_alias(), get_alias_from_device(), get_attribute_from_alias()
  and get_alias_from_attribute(). Deprecate get_alias(), get_device_alias() and get_attribute_alias()
  Also add a new rename_server() method
- Add DeviceProxy::get_tango_lib_version() method
- Add DeviceAttribute::set_error_list() method
- Remove CORBA methods throw clause
- Add Database::get_device_info() method
- Coherent inserters/extracters method set between DeviceData and DeviceAttribute for DevEncoded data type
- Change format define for DevEncoded attribute data type to prevent compilation error when used with Lima
- Add a check against NULL pointer in Attribute::set_value() method
- Message "Failed to narrow the EventChannelFactory... is printed on console only during DS startup
- Reduce min polling period to 5 mS

Bug fixes
---------

Bug recorded in sourceForge:

- 178 (2027829) and 219 (2668010) : Database::get_services() method
- 529 (3563183) : Group command_inout fails between server restart
- 530 (3564392) : Database::get_info() method returns a string with extra '\0'
- 531 (3564930) : DeviceImpl::stop_poll_attribute and stop_poll_command
- 533 (3564995) : Memory leak in DbDatum class
- 534 (3565021) : Archive event subscription with only relative change
- 536 (3566280) : Device right in init_device() method when using a device running in another CS
- 537 (3568781) : Memorized attribute and device monitor
- 545 (3577835) : Event subscription by different threads
- 546 (3577837) : Attribute name given to user callback
- 552 (3586344) : Polling thread out of sync error and event
- 554 (3592399) : Seg fault in Attribute::set_value()
- 559 (3601231) : Limit in event number
- 560 (3601232) : Open file leak
- 561 (3601267) : Access right exception
- 563 (3601471) : exit() call in library
- 570 (3604715) : Default format of DevULong (Feature Request 22)
- 572 (3605540) : DevUChar memorized attribute
- 593 (3606931) : DeviceImpl class polling methods 
- 602 : Tango lock mechanism
- 603 : Open file leak (duplicate of 560)
- 604 : Polling with long period
- 608 : Missing include for FreeBSD
- 609 : FreeBSD and DServerSignal::get_sig_thread_pid() method

Other bugs

- In notifd event system in case of slow DS generating event
- In state/status management when attribute are wrongly configured
- Small bug in returned value of GroupAttrReply::operator>>
- In event reconnection in the DS is re-started with the instance name given with different letter cases
- In admin device RestartDevice command when the device name is defined with upper case letters
- Double free in case of event system reconnection when events are sent to queue
- Safer memory management in Deviceproxy::read_attributes() method


05/2012        *******************************************************
               *                                                     *
               *  Tango release 8.0.5 : Changes since version 7.2.6  *
               *                                                     *
               *******************************************************

Tango 8 has been developed and tested using:

- omniORB 4.1.6
- zmq 3.1
- log4tango 4.0.7

Changes between Log4tango 4.0.3 and Log4Tango 4.0.7
---------------------------------------------------

- SourceForge bug 3156197
- Fix warnings when Tango is compiled -Wall -Wextra
- Add Windows port for Windows 64 bits VC10
- Add ACLOCAL_AMFALGS in main Makefile.am
- Update Doxyfile file
- Apply Alessio's patch:
	- Re-enable Thread's name PatternComponent
	- Add Thread's id PatternComponent
	- Add missing conversion patterns (%t and %T)

Changes in Tango itself
-----------------------

- New event system based on ZMQ
- New methods to manage polling in DeviceImpl class (is_attribute_polled()/is_command_polled,
get_attribute_poll_period()/get_command_poll_period(), poll_attribute()/poll_command(),
stop_poll_attribute()/stop_poll_command())
- DevEncoded data type supported for commands
- New Attribute class setter/getter methods for min_alarm, max_alarm, min_warning and max_warning attribute properties
- New Attribute set_properties/get_properties to set/get several attribute properties in one call
- Cleaner way to reset kernel attribute properties to lib/user/class default value
- Add some C++11 features when compiler support them (Lambda functions - unique_ptr for extension classes -
Move contructor and assignement for DeviceData and DeviceAttribute classes)
This requires a new compilation option (-std=c++0x)
- The DeviceProxy and DeviceAttribute classes copy constructor and assignement operator now really copy the data
- Add device log messages when any device attribute(s) quality factor changes
(ATTR_INVALID -> error stream, ATTR_CHANGING -> info stream, ATTR_VALID -> info stream
ATTR_ALARM: min/max alarm -> error stream, min/max warning + rds -> warning stream)
- Add a clean_db parameter to the DeviceImpl::remove_attribute() method. Default is true
- New DeviceProxy::get_access_right() method
- New Util::is_svr_starting(), Util::is_svr_shutting_down() and Util::is_device_restarting() methods
- New DeviceClass::get_cmd_by_name() method
- New DServer::_create_cpp_class() method (For PyTango)
- Remove warnings compilation (Tango is now compiled with -Wall and -Wextra)
- Add Group::command_inout(), Group::command_inout_asynch(), Group::write_attribute() and Group::write_attribute_asynch()
with vector<DeviceData> to carry the data.
- Improvements in event management for notifd events (link to bug 3293671)
- For writable and memorized attribute(s), check coherency of new min/max_value with memorized value when the
attribute configuration is modified.
- State computation for device with alarmed attributes: If the attribute is polled, the attribute value is
read from the polling buffer (also true when reading the state as a CORBA attribute)
- Add pre-processor define for Tango release number management (TANGO_VERSION_MAJOR, TANGO_VERSION_MINOR
and TANGO_VERSION_PATCH)
- Host IP address(es) is(are) now retrieved from network interface(s)
- Add a check during set_attribute_config() call for users trying to change hard coded properties
- Optimization in DeviceProxy methods to get asynchronous call replies when caller uses a timeout in case the
reply is already there
- Remove some "cerr" messages in AttributeProxy class
- Uil::get_host_name() always returns host name in lower case letters
- The caller PID is now reported in black-box also when UNIX socket is used as transport
- write_attribute() called during device server startup sequence due to memorized attribute(s) is reported 
in black box with a specific message
- It's now possible to poll command/attribute in a device server started without database for command/attributes
with polling defined in code
- Add a polling thread tuning after the execution of UpdObjPollingPeriod command
- Remove all Solaris specific code
- Remove all old stream specific code
- Signals SIGUSR1 and SIGUSR2 can now be used within a device server process
- Optimize database calls during device server startup and shutdown sequence (When TAC is used or when
dynamic attributes are used)
- Added Database class copy constructor and assignment operator
- Restore user signal handler for SIGPIPE after CORBA::ORB_init() call
- Tango is now compiled with Debian hardenning flags on.


Bug fixes
---------

Bug recorded in sourceForge:

- 3129849 : TANGO_HOST case sensitive for some event usage
- 3151801 : Missing some attribute properties in UserDefaultAttrProp class
- 3165120 : Yet another type in doc
- 3206916 : Another type in doc
- 3213730 : Device server add wrong ',0' in attribute abs_change property
- 3259442 : Macos compilation on x86
- 3267364 : Typo in documentation
- 3277453 : Database class and Tango Access Control
- 3280851 : Wrong state computation
- 3285370 : Printing operator for DeviceData class
- 3285372 : Wrong lock removal of last locked device from a locking thread (Windows specific)
- 3285674 : NaN in write_attribute() call (With a control system prop. to allow/disallow NaN)
- 3313211 : Polling threads pool management
- 3399975 : ULong data type and memorized writable attribute
- 3400550 : State computation with alarmed attributes
- 3413944 : Memorized attribute written at init
- 3460080 : Device server crash during event reconnection (event between devices within the same DS)
- 3468928 : Does not compile with gcc 3.3
- 3480524 : Write attribute (SCALAR) when throwing exception
- 3495592 : Logging directory
- 3505226 : Tango misses ORB parameters

Other bugs

- When user pushes event, pushes first event when it is inited (when the event detection is done by the lib)
- In case of consecutive signal installations and removals.
- Bug in error message and in inserters in DbDatum class for unsigned char data type
- Bug when updating database due to one attribute configuration change
- Bug when using the WAttribute::set_min_value() methods family: The attribute was not flagged as attribute with 
minimun value defined
- Doc: Fix bug in Database::get_device_attribute_property() method usage example
- Bug in WAttribute::set_min_value() and Wattribute::set_max_value() methods for unsigned char data type.
The data was stored in database as ascii characters
- Device server crashes when you kill it if there are some long running actions when the signal is received.
- It's now possible to define in code that state and status has to be polled
- It's now possible to define an archive event period or a periodic event period for state or status attributes
- Possible device server process crash (depending how you are lucky) when trying to start one with an
instance name not defined in database
- Bug when reading attribute from CACHE when the attribute is not polled. The returned exception was not correct
- Wrong printed date (and reported in blackbox) when used on 64 bits computer
- Bug in attribute property management for dynamique attribute when the property is an array
- Fix bug in logging for devices not using database when the logging level is specified on the command line



03/2011        *******************************************************
               *                                                     *
               *  Tango release 7.2.6 : Changes since version 7.2.1  *
               *                                                     *
               *******************************************************


Note: Tango 7.2.2 to 7.2.5 have never been officially released outside ESRF.

- Replace the deprecated gethosybyname() and gethostbyaddr()calls. This allows running Tango on
  OS like Ubuntu 10.10 with the default /etc/hosts file
- Optimize database call retries number during device server startup sequence.
- Added a DeviceProxy::get_access_right() method
- Add a check on empty device name in DeviceProxy ctor methods
- Add a encoded_format.h file for DevEncoded string definition
- Reset SIGINT and SIGQUIT to their default behavior during DS startup sequence.
This is needed in case of Tango class using signals and started as background process by a shell
script

Bug fixes
---------

Bugs recorded in SourceForge

- 3110842 : Memory allocation in state command
- 3118520 : Windows: DS freeze when using event
- 3119664 : Windows: Stream inserter for DeviceAttribute fails
- 3122125 : Windows: DS crash at exit
- 3165232 : TAC and multi TANGO_HOST
- 3206383 : Double free in DeviceProxy::read_attributes()

Other bugs

- Two bugs related to controlled access on the database device
- Wrong synchronisation for periodic and archive (periodic part) events with non constant attribute
  reading time
- TAC and re-connection (all commands allowed after a re-connection!!)


11/2010        *******************************************************
               *                                                     *
               *  Tango release 7.2.1 : Changes since version 7.2.0  *
               *                                                     *
               *******************************************************
			   
Bug fixes
---------

Bugs recorded in SourceForge

- 3092967 : Tango 7.2 DS crash when reading a string scalar R/W attribute

Other bugs

- DS crash in dynamic_cast when using C++ and Python Tango classes within the same process
- Windows: Reduce timeout for DS trying to connect to a non running notifd


10/2010        *******************************************************
               *                                                     *
               *  Tango release 7.2.0 : Changes since version 7.1.1  *
               *                                                     *
               *******************************************************

			   
Tango 7.2.0 has been developed and tested with omniORB 4.1.4

Remarks about omniORB 4.1.4
---------------------------

- SourceForge bug number 3054292 (client hangs on ping) is solved by a omniORB patch available in the SourceForge bug tracker
- SourceForge bug number 3011742 (memory leak) is also solved by 2 omniORB patches available in the SourceForge bug tracker


New / Optimized features
------------------------

- The client API is now thread-safe:
This means that you can share a pointer to a DeviceProxy class instance between several thread. Note that if one thread changes
data like the device time-out, this change will be seen by all the other threads using this device.
In next major release (Tango 8), a new mechanism will be implemented allowing the user to choose if he want a thread safe 
or unsafe device proxy. For compatibility reason, it was not possible to include this change in a non major release.
- It's now possible for applications to subscribe several times to the same event (with or without the same callback object)
- Add check on attribute dimension when using AttrData<T> class to fill polling buffer hsitory
- Subscribe to a data ready event fails if the Attr::set_data_ready_event() method has not been called (in the server side).
This allows application to be aware that the device could/couldn't fire data ready event
- Added insertion operators (<<) in the DeviceAttribute class for const char * and Tango::DevString
- Polling and logging related commands allowed only for the device lock owner when the device is locked
- Add a way to externally fill-up the polling buffer for R/W attribute when specifying the attribute written part
- No more database call executed by DeviceProxy constructor if it is called in a device server and the device is in the same process
- Better management of device server started on host with several network interface (ORBendPoint option not needed any more)
- Added a ApiUtil::get_env_var() method (static)
- Better timeout management during re-connection in case of device server running on a host switched off
- Add a new way to write class_factory() as a function instead of a DServer class method. Needed for PyTango on Windows using DLL
- NaN is now taken into account in RDS alarm for float/double (and array of) attributes


SourceForge features request
----------------------------

- 2721963 : Implemented a much faster device server shutdown sequence
- 3004584 : Add a way to define a minimum polling period using properties

Bug fixes
---------

Bugs recorded in SourceForge

- 2894469 : "localhost" correctly managed in TANGO_HOST environment variable
- 2908860 : Applications seg. fault at exit if notifd is dead
- 2910028 : Attribute history not correctly initilised (written part y dimension)
- 2916280 : Accessing a device in a non-db device server
- 2917038 : Seg fault if you start a device server from a thread which is not the main thread
- 2934375 : Polling thread out of sync for very slow polling
- 2934862 : Possible seg fault in device server
- 2954995 : Seg fault in device server for scalar, R/W attribute with quality factor set to invalid
- 2977091 : Memory leak in DeviceProxy::get_attribute_list() method
- 2979781 : Polling properties management
- 2988115 : DeviceProxy::read_attributes() call with several times the same attribute
- 2993423 : Dead lock in DeviceProxy unsubscribe_event() method
- 2996669 : Tango group and device defined using full Tango device name
- 3015443 : Inconsistency in event error management
- 3016953 : State command/attribute throws exception in case of attribute with alarm level defined and quality set to invalid
- 3017075 : Same bug than 3016953
- 3019067 : Dead lock in device server
- 3033465 : File name for device server using database in a file
- 3068607 : Memory leak for scalar, R/W string attribute
- 3079309 : Wrong error messages
- 3080885 : Double free for some DB calls in case of communication problem

Bugs not recorded in SourceForge (Shame on us)

- Events from device server using a file as database
- Some cases of re-connection with device running on Windows
- DeviceImpl::remove_attribute() does not correctly manage main attribute vecor indexes preventing nice implementation of
  dynamic attributes
- The value set by a WAttribute::set_write_value() if used in the attribute write method (write_MyAttribute) was overwritten
  with the caller value

Documentation
-------------

- Add property file syntax description (Appendix F)
- Add Group::read_attributes() method documentation
- Add / Update doc related to new / modified features
- Fix some typos			   
			   
			   
			   
11/2009        *******************************************************
               *                                                   	 *
               *  Tango release 7.1.1 : Changes since version 7.1.0  *
               *                                                     *
               *******************************************************


- Change in the way polling thread(s) starts
- Support of events in Tango system with multiple db servers
- Attribute name passed to the event callback is now the fully qualified
attribute name


Bug fixes
---------

Bugs recorded in SourceForge

- 2880372: Change of attribute config setting lost if DevRestart is done
- 2881841: Attribute quality factor is set incorrectly in Tango 7.1



               *******************************************************
               *                                                   	 *
               *  Tango release 7.1.0 : Changes since version 7.0.2  *
               *                                                     *
               *******************************************************
			   

Tango 7.1.0 has been developed and tested with omniORB 4.1.4

- On Unix like OS, the communication between devices on the same host uses Unix domain socket
- Database server host names stored with its FQDN
- Configurable attribute serialization model added
- Comment character (#) supported in the Tango rc file
- A Tango rc file is also supported on Windows platform ($TANGO_ROOT/tangorc)
- Call to DeviceImpl::stop_polling() method silently ignored if the polling is already stopped
- Added optimized DeviceProxy::read_attribute() call (Not yet virtual)

Bug fixes
---------

Bugs recorded in SourceForge

- 2787140: Wrong value returned from DeviceProxy::get_logging_level()
- 2788358: Typos in exception fields
- 2801558: Stateless timeout
- 2803392: Event in multi Tango host system
- 2810110: Pushing change event with quality factor set to INVALID
- 2811351: Change event for state attribute
- 2812775: No more events after a double subscription
- 2814404: Wrong string comparison in polling threads pool init
- 2821229: Client crash at exit if using device locking and event
- 2821898: AttrConfEventData, EventData copy ctor and assignment operator
- 2826552: Event abs_change and rel_change attribute property resetting failed
- 2836943: Unsubscribe_event locks
- 2836238: Non PIC code

- 2840364: Missing ctors for DeviceAttribute class
- 2861309: Race condition in EventConsumerKeepAlive thread
- 2871262: Unsubscribe_event seg fault

Bugs not recorded in SourceForge

- Server crash when reading several attributes with the DeviceProxy::read_attributes() call
with one of the attribute being the State and other attributes being scalar with alarm
threshold defined

			   
05/2009        *******************************************************
               *                                                   	 *
               *  Tango release 7.0.2 : Changes since version 6.1.1  *
               *                                                     *
               *******************************************************
			   

Tango 7 is using Log4Tango 4.0.3. This new release of Log4Tango does not add 
any new feature to Log4Tango.It simply allows smooth compilation with gcc 4.3

Tango 7 has been developed and tested using omniORB 4.1.3

- Control access in C++ (It was already available for Java)
- New DevEncoded attribute data type
- New attribute data transfer (Using IDL union instead of Any) 
- Optimized image transfer using attribute DevEncoded data type in compressed
  (JPEG encoder/decoder) or uncompressed format
- Event queues
- Multiple polling threads
- Fast polling buffer history retrieval
- write_read_attribute() call
- Data ready event
- Device dependency tree
- User main event loop
- Cancel asynchronous request (local to the client)
- Attribute data format transferred when reading attribute(s)
- Add some new constructor for class DbDatum and DeviceProxy (from const char *)
- Add some equality operators for miscellaneous classes - C
- New management of env. variable (Unix only) including conf. files
  ($HOME/.tangorc an /etc/tangorc)

Small changes:
--------------

- Increase default blackbox depth to 50
- Support for gcc 4.3

Windows specific:
- Support VS8 (VC8) and VS9 (VC9)

Bug fixes:
----------

Bugs recorded in SourceForge

- 1969687: Possible crash for device server started without database
- 1982044: Crash in "new DeviceProxy" in case of multi-threaded application
- 2019405: Memory leak in DeviceProxy::read_attributes in case of exception
- 2092748: Memorized attribute after an Init command
- 2119141: const parameters for Util::trigger_xxx_polling() methods
- 2150859: Wrong management in admin DeviceProxy instance admin device in case
  of multi TANGO_HOST
- 2157328: Double memory free in DeviceProxy::command_inout_reply() method
- 2182565: Removing dynamic attribute in init_device() method
- 2489781: Type in database command name
- 2633201: const parameters in DeviceProxy::get_attribute_config()
- 2761379: DeviceProxy::alias() method for default constructed device
- 2784265: Bug in doc
- 2784267: Wrong output format in DeviceData/AttributeDataHistory

Bugs not recorded in SourceForge !

- Fix small memory leaks in
   - server Db cache (16 bytes)
   - Database::unexport_event() method
- Attribute::set_value_date_quality() methods family when attribute quality
  is set to ATTR_INVALID 
- Remove the server ORB endPoint defined in code before the call to ORB_init()
- Fix bug when starting a DS with "database on file"
- Clean shutdown of signal thread when a DS is killed
- Remove the "was only XYZ ms ago" in the error description in case of too
  frequent re-connection attempt.
- Change event on attribute using the DevState data type required the change
  property to be set!
			   

04/2008        *******************************************************
               *                                                   	 *
               *  Tango release 6.1.1 : Changes since version 6.0.0  *
               *                                                     *
               *******************************************************

- Bug fixes:
	- Compatibility problem between release 6.0 and 6.1


               *******************************************************
               *                                                     *
               *  Tango release 6.1.0 : Changes since version 6.0.0  *
               *                                                     *
               *******************************************************
			   
- Stateless event subscription : an event subscription is possible now, 
  even when the device server is not running. The subscribe_event method 
  takes a new boolean parameter to trigger stateless event subscription.
  
- Attribute::set_write_value methods have been added for spectrum and image
  data types.
  
- Added extratction methods to DeviceAttribute to individually extract
  read and set point values. Added methods to read the data dimensions 
  which are compatible with the Java API.
  
- Ported to MacOSX

- Class dlls for Windows can be created and can be used as for UNIX now.

- Device server now uses a database cache to get all their data during 
  their starting sequence. This cache is filled in by a new Database server
  command and destroyed at the end of the startup sequence. When possible, all
  data are fetched from this cache instead of from the database.
  If it is not possible to fill in this cache for any reason, the device server
  process starts using the traditional way.

- Optimize network calls during connection establishment between client and server

- Implement a new timeout management for database object access. The timeout
  used has a different value when the device server is in its starting phase

- Automatic management of a TCP connection establishment timeout for the
  database object

- Add new Database class methods to interface the two new database server
  commands (DbGetDataForServerCache and DbDeleteAllDeviceAttributeProperty)

- Change the way the DB is cleanup up due to dynamic attribute deletion
  during device server shutdown

- Default value for the "doc_url" part of the info() network call changed
  to "http://www.tango-controls.org"

- Add new methods allowing a better way to set the CVS tag and CVS location
  info returned by the info() network call

- Add 2 new Attribute::set_properties() methods which can be used in a Tango class
  init_device() method


- Bug fixes:  
	- Solved deadlock when subscribing events from different threads.
	- Initialisation of memorized attributes during the init command.
	- Correction of client and server shutdown procedures when using 
	  the event client part.
	- Corrected the event synchronisation when a client is using another
	  threading package than omnithreads.
	- Fix client multi-threading issue when a CORBA exception was received during
	  a re-connection
	- Name letters case bug in polling thread command and in polled objects
      name stored in database
	- One re-connection case was not "transparent"
	- Clarify some exception messages
	- Polling thread synchronisation bug for internal commands start-polling, stop-polling
	  and rem-obj-polling
	- Bug in the admin device RemObjPolling command related to polling
	  properties management (When the removed object was last polled object)
	- Bug in asynchronous call in PUSH_CALLBACK mode when used intensively
	- Polling configuration mismatch after an Init command on the admin device
	- The DbGetDeviceList database command now has the same wildcard for its two 
	  parameters ("*")
	- Bug in the remote "info" call for devices implementing IDL3
	  (missing CVS Tag and CVS location)
	- Bug when getting the State history using the command_history() calls
	- Windows specific: Device server configured as "daemon" correctly starts on
	  a windows host with netowrk connection unavailable when the DS starts


06/2007        *****************************************************
               *                                                   *
               *  Tango release 6.0 : Changes since version 5.5.2  *
               *                                                   *
               *****************************************************

- Ported to OmniORB 4.1, which is a major release of omniORB and
  changes the generated code from the IDL.
  
- Ported to 64 bit architectures (Linux and Windows (x64))


- Add an attribute configuration event which is pushed every time an 
  attribute property changes. This allows to synchronize all client 
  displays of an attribute.
  
- Added new filterable fields "quality" and "delta-t" (sine last archive_event) 
  to the archive event
  
- Events with quality invalid are only send once as long as the quality
  stays invalid.
  
- Events with exceptions are only send once as long as the exception does
  not change.
  
- Modified the synchronisation between the event consumer and the keep 
  alive thread.
  Exchanged the global mutexes on the channel and the callback maps 
  by individual monitors for every channel and every callback. 
  The monitor can time-out and will not block the event reception 
  for a long time in case of problems.
  To synchronise with subscribe or unsubscribe requests, added a 
  global reader writer lock around the two maps.
  The subscribe thread is the writer and the event consumer and the keep 
  alive thread are the readers.

- When removing dynamic attributes all their configuration will be deleted
  now from the database. Polling configuration and event configuration
  properties will be deleted.
  
- Events are available for devices servers running with a file database
  or without database. 
  
- Filling polling buffer using Util::fill_attr_polling_buffer() now 
  possible also for R/W attribute
  
- Add get/set min/max_value methods family in the WAttribute class  
 

- A bunch of new methods was added to the C++ database API to implement
  the same functionality as the Java database API.
  get_host_list, get_services, register_service, unregister_service,
  get_class_for_device, get_class_inheritance_for_device,
  get_device_exported_for_class, put_device_alias, delete_device_alias,
  put_server_info, delete_server_info, get_server_class_list,
  get_server_name_list, get_instance_name_list, get_server_list,
  get_host_server_list, get_device_class_list, get_device_property_history,
  get_device_property_list, get_device_attribute_property_history,
  get_class_property_history, get_class_list, get_class_property_list,
  get_class_attribute_property_history, get_class_attribute_list,
  get_attribute_alias, put_attribute_alias, ...
 
  
- Methods to change timeouts for groups (common or individual)  

- New Util::get_tango_lib_release() method

- Add the DeviceClass::device_destoyer() method (opposite of the 
  device_factory)
  
- The polling thread is now configured without creating a separate thread 
  (new argument in its ADD_OBJ_POLLING command)

- Add omni_thread::ensure_self object in AutoTangoMonitor and 
  NoSyncModelTangoMonitor classes in order to use these objects in 
  threads not created by omni_thread (Python thread for instance)
  
- Add device name in Tango monitor print messages

- MAX_TRANSFER_SIZE is now 256 Mbytes
 
- Removed all #ifdef for HP-aCC compiler

- The Tango database server do not use the root account for MySQL any
  more. You can configure any account to be used via the my.cnf 
  configuration files or via the environment variables MYSQL_USER and
  MYSQL_PASSWORD.



- Bug fixes:
	- Polling did not restart correctly after an Init command on a device
	  server admin device

	- Bug in re-connection after a device server admin device Init, Restart or 
	  Devrestart command  

	- Two small memory leaks when dealing with dynamic attributes

	- Admin device did not handle device alias in its DevPollStatus command

	- Bug in add_attribute() method if you try to add an attribute with the 
	  same name but a different definition (different data type, data 
	  format, ...)
	  
	- Several bugs when removing dynamic attributes

	- Bug when removing a CORBA servant for non-exported device

	- Bug in Util::get_device_list_by_class() in some specific cases

	- Bug in the forced event without criteria checking. Some flag init. 
	  was missing

	- Bug in re-connection in case of asynchronous call

	- Bug in the subsribe_event() method when the DeviceProxy has been 
	  created using a syntax like "host:port/a/b/c" with host and port not 
	  the same than the one defined by the TANGO_HOST environment variable

	- In the case of a too long delivery time for events the notifd closes
	  the connection to a client. Now this case is detected in the client 
	  and the client will reconnect. 


               *****************************************************
               *                                                   *
               *  Tango release 5.5.2 : Changes since version 5.5  *
               *                                                   *
               *****************************************************
- Contains a new version of the Tango database which keeps a history
  of the last changes for every property. This needs the creation of
  new tables in MySQL and a new database server.
  
- Corrected the reconnection to the notification daemon in the case of
  network cuts.
- Increased the maximum data size to be transferred between server and 
  client from 8Mbytes to 16Mbytes.
- Since release 5.5 a server under windows could no longer be installed 
  as a windows service. Corrected the problem.


               *****************************************************
               *                                                   *
               *    Tango release 5.5 : Changes since version 5.4  *
               *                                                   *
               *****************************************************

- Change and archive Events can be pushed manually from the code now 
  without polling. Two ways are possible:
  1.) Push events but check the event configuration 
     (as the polling thread). Events are fired exactly under the
	  same conditions as with the polling.
  2.) Push events without configuration check. 
      The event is fired without any value checking.
- The quality event was removed and integrated as filter "quality"
  to the change event.
  
- The user event was adapted to follow the structure of pushing 
  change or archive events.
  
- Event reconnection will follow now when a server was moved to a
  different host. The connection will be rebuild to the new notifd.
  
- Polling configuration for attributes and commands specified in 
  the code with Pogo are written to the database at server start-up.
  The polling will start immediately and no longer on a first reading
  request.
  
- The transparent reconnection is now the default reconnection mode.

- Naming requests to the database are cached for a DeviceProxy.
  A reconnection request will be emitted only once a second for a
  DeviceProxy connection.
  The same feature is implemented in the Java api.
  
- Debugging is now possible with the Linux 2.6 kernel.
- Support of gcc 4.0
- Support of VC7 and VC8 under Windos.
- Integration of code for device servers written in Python.

- Bug fixes:
	- Corrected event priod handling for periodic events.
	- Corrected rounding errors when checking the conditions.
	  of change and archive events.
	- Corrected constructor for the class GroupReply.


               *****************************************************
               *                                                   *
               *    Tango release 5.4 : Changes since version 5.3  *
               *                                                   *
               *****************************************************

- Stopped the automatic polling startup of attributes at event subscription.
  All polling has be be configured manually!
  Subscription to events is only possible if the event properties
  for an attribute are properly configured and the polling is started!

- An exception during initialisation of memorized attributes
  will no longer result in an exit of the server.

- Memorized attributes can be used in two ways now.
  1) The setpoint gets initialised during a server startup.
     No write happens on the attribute.
  2.) The setpoint gets initialised during a server startup
      and is written to the attribute.
      The initialisation mode can be triggered by
      Attr::set_memorized_init(bool write_on_init) method
      during attribute creation.
      The two options are supported by Pogo.

 - The archive event behavior has changed. The archive period
   is no longer set to 10 seconds as default. If no period is
   specified, no periodic archive event is send.

- Bug fixes:
   - Corrected the wrong archive period reading after a
     server restart.

   - Changed DServerClass::instance() to return an exception
     in the case of a not initialised object.
     The exit() killed the server during a startup when
     a client sends requests to early.

   - Changed the clean-up mechanism when shutting down
     the ORB. Destroy ORB when returning from run().
     In 5.3 This was done in the main and when missing
     caused some threads to hang-up with the Linux kernel
     2.4.x.

   - Avoid calling Device_3Impl::status2attr() during
     attribute reading when an error was detected.
     Avoids segmentation fault in status2attr(). 


           *****************************************************
	       *                                                   *
           *    Tango release 5.3 : Changes since version 5.2  *
	       *                                                   *
	       *****************************************************
	       

- Fix bug in server part which prevents using object files compiled with 
  5.1 to link with 5.2
- Changed the clean-up mechanism when shutting down the ORB. 
  Destroy ORB when returning from run().
- Fix bug for reading and applying the period of archive events.


  

           *****************************************************
	       *                                                   *
           *    Tango release 5.2 : Changes since version 5.1  *
	       *                                                   *
	       *****************************************************


Small changes :
---------------

   - Support for gcc 3.4.x compilers

   - Support for Solaris computer with gcc (Compiled and Tested on Solaris 7 
     with gcc 3.3.2 and Solaris 9 with gcc 3.3)
     WARNING : The support of gcc on Solaris needs log4tango release 4.0.2
     -------

   - The host name stored in database is now the Fully Qualified Domain Name
     WARNING : For those using events, you now need "notifd2db" release 1.4
     -------

   - Events are now available also for device server started with the
     "-file" option. Needs "notifd2db" release 1.4
     
   - Added attribute quality change event firing by the Attribute::set_quality()
     and Attribute::set_value_date_quality() methods via a new method argument
     
   - New method DeviceAttribute::get_type() and DeviceData::get_type()
   
   - Add a AttrManip class constructor from a C++ string
   
   - Add a DeviceImpl::remove_attribute() method
   
   - A new Tango::string_dup() method to replace the CORBA::string_dup()

   - Management of two new class properties called "CVS_tag" and
     "CVS_location"
     
   - Add a method Command::set_name()
   
   - Change parameters for omniORB server threading strategy. Server
     switches from thread per client to thread pool at 50 connections and
     max number of threads is now 100
     
   - When events are used, add a new error "API_PollThreadOutOfSync" if polling
     thread discards work item because it is late.
     
   - Add two new commands in device server admin. device for device creation
     wizard
     
   - Start a device server with "-v5" if you want to see Tango library messages.
     The "-v4" now put only classical devices in DEBUG mode.

Bug fixes :
-----------

   - Review exception thrown by the DeviceProxy::subscribe_event() and 
     DeviceProxy::unsubscribe_event()
     
   - No more "Class not initialised" at device server startup (It was a bug
     introduced by V5)
     
   - Fix bug for device server started with the "-file" option in the
     get device property and get class property features
     
   - No more "seg faults" in the DeviceAttribute::has_failed() method
   
   - For Solaris : Reset SIGINT and SIGQUIT signals handler to default value.
   
   - Fix deadlock in device server introduced in V5 in some specific cases
     when device server manage device with commands or attribute polled
     at startup and by first reading
     
   - Correctly initialise fileds "attr_name" and "event" in the EventData 
     structure passed to client when the event hartbeat is missing
     
   - Fix incoherency between C++ and Java API for the 
     Database::delete_device_attribute_proerty() and
     Database::delete_class_attribute_property()
     
   - Fix bug which generates a "core dumped" when killing device server on
     Debian Linux system
     
   - Fix bug in the archive event period returned to the client with the
     get_attribute_config call
     
   - Fix bug in the date stored in Attribute history when using polling buffer
     externally filled and exception
     
   - Fix bug in event reconnection (one attribute name was still case dependant)
   
   - Fix bug when asking polling thread to poll state or status attribute.
     Polled them as attributes only for device server implementing IDL 3
     
   - Fix bug in device server startup phase for device server with polled
     objects at startup and at first reading.
     
      


           *****************************************************
	       *                                                   *
           *    Tango release 5.1 : Changes since version 5.0  *
	       *                                                   *
	       *****************************************************


Small changes :
---------------

   - Remove device name from library default value from attribute label
     property
     
   - An empty string for string attribute properties will now return
     their values to the default one (from lib or from a user defined one)
     
   - Some improvements in error management when parsing database file with
     the device server -file option

Bug fixes :
-----------

   - Fix bug when setting R/W attribute write value with the
     WAttribute::set_write_value() method in device server startup phase
     
   - Fix bug when polling a Device_2Impl device's attribute which throws
     an exception (crashed the device server)
     
   - Library default value for the attribute label property not stored in
     database any more
     
   - Fix bug in Database::get_class_attribute_property() and
     Database::get_device_attribute_property(). Could generate stange behaviour
     (even core dumped) when reading attribute configuration on a Device_2Impl
     device or when creating on AttributeProxy object on a Device_2Impl
     
   - Fix bug when reading R/W Device_2Impl attribute. The  last written value
      was always 0.
      
   - Fix bug which crashes a device server when a client linked with Tango V4
     tryed to get attribute history from a Device_3Impl
     
   - Fix some tables in the HTML doc which appears with only one row.
 
 
 
 
           *****************************************************
	       *                                                   *
           *    Tango release 5 : Changes since version 4.3    *
	       *                                                   *
	       *****************************************************


Main changes :
--------------

   - A new way to code attribute inside a device server.

   - It is now possible to read several attributes with the read_attributes
     call even if one of them failed.
     
   - It is now possible to write several attributes with the write_attributes
     call even if one of them failed.
     
   - Four new attribute data type which are : Boolean, float, unsigned char and
     unsigned short.
     
   - It now supports image and spectrum attributes as READ_WRITE or
      READ_WITH_WRITE attribute.
      
   - Device state and status can be read as attributes.
      
   - Added memorized attributes (only for scalar attribute).
   
   - Each attributes now support a four thresholds level alarm (instead of two)
   
   - Each attribute implements a Read Different than Set (RDS) alarms.
   
   - New attribute configuration set (including alarm and event parameters).

   - External triggering of the polling thread.
   
   - Add methods to set the attribute or command polling buffer.
   
   - A new device server command line option (-file=<file name>) allowing
     a device server to run using a file to get/store properties instead of the
     database.
     
   - Four monitors per device in a server instead of one allowing a better 
     concurrency model.
     
   - Auto tuning of the polling thread and configuration at device server
     startup time by a separate thread
   
Small changes :
---------------

   - It now uses omniORB 4.0.5
   
   - Exception thrown if you subscribed two (or more) times to the same event.
   
   - AttributeProxy class constructor suppports attribute name syntax like
     "device alias/attribute name".
     
   - Added calls in Database and DeviceProxy classes to get alias name from
     device name.
     
   - It is now possible to defined command or attribute polling buffer depth
     individually.
     
   - Added copy constructor, assignement operator and destructor for the
     EventData class.
     
   - DeviceProxy and AttributeProxy classes constructor allow device or
     attribute name specified like "//host:port/....".
     
   - Added the "source" parameter value in device black box for command_inout
     and read_attribute calls.
     
   - Only one line stored in device black box for command_inout or
     read_attribute calls when used from IDL release 2 or 3.
     
   - When killing a device server, it now waits for last request to be ended.
   
   - Added insertor/extractor for Boolean type to the DbDatum class.
   
   - The admin device command "QueryDevice" now returns device name in the
     following syntax : <class name>::<device name>.
     
   - Add some methods in the DeviceDataHistory and DeviceAttributeHistory
     classes for compatibility reasons.
     
   - Added many new Attribute::set_date and Attribute::set_value_date_quality
     methods.
     
   - The dev_type of the info call in now a string instead of a numer.
   
   - Added DeviceClass methods to set/get the info device type field.
   
   - If a server is not able to connect to the notifd on its host, it now
     unexports its event channel from the database.
     
   - The event heartbeat is now manage in the polling thread as a separate
     object. This allows to have periodic event of any period even greater
     than 10 seconds.
     
   - DeviceProxy::subsribe_event now throws exception in case of change event
     without any related attribute configuration parameters set.
     
   - New construcor in TangoMonitor class with a name to ease debugging.
   
   - Device and class attribute properties can now be array. Needs
     datbase device server release 2.4.0 or above. Compatibility with
     older database release is supported.
     
   - Remove all direct access to database device in a server. Now, always
     uses method of the Database class.
     
   - Change library default value for attribute label and format configuration
     set.
     
   - By default, DeviceAttribute and DeviceData now throws exception if trying
     to extract data from empty instance.
     
   - WIN 32 specific : The polling thread uses WIndows Performance Counter to
     measure command or read attribute execution time


Bug fixes :
-----------

   - When getting attribute history from polling buffer and attribute has a
     quality factor set to ATTR_INVALID.
     
   - In the Database::get_class_property method. Could generate some strange
     "core dump/seg fault" in DeviceClass initialization.
     
   - In the admin device "DevRestart" command. The device name passed as
     parameter was still case dependant.
     
   - If date not set by the user, attribute date automatically set when
     attribute quality factor is ATTR_INVALID.
     
   - In the asynchronous PUSH_CALLBACK model. The callback thread ate all
     CPU power.
     
   - When inserting vector into DbDatum object. Still a stream problem.
   
   - Fix order in which device server classes are destroyed (opposite order
     than the one used during device server startup phase)
     
   - In Database::get_info() method for WIN32. A call to CORBA in() method
     was missing
     
   - In DeviceProxy::adm_name() method. It now returns full admin device name
     with host/port in case of non database device.
     
   - In device exit sequence if an exception was thrown during the 
     Util::init method.
     
     


           *****************************************************
	       *                                                   *
           *    Tango release 4.3 : Changes since version 4.2  *
	       *                                                   *
	       *****************************************************
	       

- Fix bug in server part which prevents a device server compiled with Tango
  release 4.2 to run using Tango 4.1 shared library


           *****************************************************
	       *                                                   *
           *    Tango release 4.2 : Changes since version 4.1  *
	       *                                                   *
	       *****************************************************
	       

- Add full reconnection between clients/servers and the CORBA notification
  service daemon.

- Add SA_RESTART flag when signals are installed in the operation system

- DeviceImpl::get_db_device() method now throws exception in case of
  non database device

- DeviceProxy constructor from string does not "lowercase" the passed string 
  any more

- Add a default setting for attribute quality factor at Attribute object 
  creation time

- Fix bug in event generation if device name stored in database contains upper 
  case letters

- Fix bug when reading attribute from CACHE and attribute quality factor set to
  INVALID

- Fix bug when modifying attribute properties max_value, min_alarm or 
  max_alarm without any change on the min_value property 

- Fix bug in read_attributes() call when source is not DEVICE and some of
  the device attributes/commands are polled and "AllAttr" used as attribute name

- Windows service : Fix bug which prevents device server used as service
		    with polled attributes or commands to start correctly.


           *****************************************************
	       *                                                   *
           *    Tango release 4.1 : Changes since version 4.0  *
	       *                                                   *
	       *****************************************************


- Fix bug in some Database class methods when used with gcc 3.2

- Remove unecessary call to "connect(this)" in DeviceProxy::unsubscribe_event()
  method

- Fix bug if several strings used in the filter string(s) passed to the
  DeviceProxy::subscribe_event() method

- Add a way to send command to the KeepAliveThread event thread
  This allows the ApiUtil::cleanup method to work properly

- Fix bug in the change detection for change event when the attribute is
  a string

- Add a call to the event callback for event when the client re-connect to a
  server which has been re-started

- Change the order of include files in the master tango include file

- Fix bug when defining attribute min_value, max_value, min_alarm or max_alarm
  in scientific notation for long attribute

- Add a check on the exception minor code of the CORBA::IMP_LIMIT exception
  before adding error description in the exeception message

- The Group::get_device() methods now throw an exception if the device is not
  reachable

- Windows DLL : Don't ask anything to be done by "atexit" call due to a deadlock  in omniORB ORB shutdown in this case. 

- Windows DLL : Add some import/export declarartions.


           *****************************************************
	       *                                                   *
           *    Tango release 4 : Changes since version 3.0.2  *
	       *                                                   *
	       *****************************************************


- Added the event system

- Added the Group class

- Added the AttributeProxy class

- It's now possible to have a Tango device server using the Tango lib as
  a Windows DLL

- Doc and Tango WEB pages updated

- Device destructor are now called when a device server exits

- The library versionning now uses the classical way of doing

- Fix memory leaks
	- In the Database::get_device_exported() call
	- In the DeviceProxy::is_polled() method if nothing is polled
	- In the DeviceProxy::command_inout_asyn() call using fire and
	  forget mode
	- In the State command for devices with attributes with an alarm
	  level set and with one of these attribute throwing exception 
							
- The Win32 device server graphical window "Debug" menu has been updated to
  take logging into account

- Added Attribute::set_write_value() methods

- Clean-up the way a device server is killed. The "kill" command of the
  administration device will generate the Valgrind report file
  if the server is started using Valgrind. If you want to benefit from this
  change, add the Util::server_cleanup() call at the end of your device
  server main function. See Tango V4 doc chapter 8.4.6 for example.
	  
- Fix some gcc compiler warnings when used with its -Wall option

- Fix bug in the DeviceProxy copy constructor and assignement operator

- Change the way DeviceProxy::write_attribute() method is written

- Added DeviceAttribute constructors from a "const char *"

- Split all "str().c_str()" in a two lines code (for Win32 compiler)

- Add a check on polling property number when server starts

- Add a new command to the polling thread to kill it

- Fix bug when updating (via set_attribute_config) attribute properties and
  the min_value attribute property was set to either "NaN" or "Not specified"
	      
- Device state switches to ALARM if one of the device attribute does not
  have alarm level defined but have its quality factor set to ALARM
		  
- Fix bug in DeviceProxy::poll_command(const char *...) and in 
  DeviceProxy::poll_attribute(const char *...)

- Fix bug for device server started without database and a device name given
  on command line mixing upper and lower case letters
    
- It's now possible to send command to the polling thread from itself

- Added DeviceProxy::set_transparency_reconnection() and
  DeviceProxy::get_transparency_reconnection() methods to silently handle
  device reconnection
	  
- Added the ATTR_CHANGING attribute quality factor

- In the BY_CLASS and BY_PROCESS device server process serialization model,
  the class (or process) monitor is taken during device(s) creation
	      
- Fix bug when inserting/extracting vector in a DbDatum object. This bug 
  appaers only for vector with element of different size
  (for instance, a vector<double> with first element set to 1.2345 and the
  second element set to 2.3)
		      
- Change in polling strategy:
  - Add a random number of milli seconds (between 0 and 500) before the first
    polling of each object (command or attribute) to be polled
				      
  - Take command execution time into account in the "Data not updated since "
    polling status string



           *********************************************************
	       *                                                       *
           *    Tango release 3.0.1 : Changes since version 3.0.0  *
	       *                                                       *
	       *********************************************************
	       

- C++ Tango now uses omniORB 4.0.1

- C++ client classes : - Device timeout are back

		       - It is now possible to have several Tango database 
			 servers within one control system 

		       - Added some functions to easily print DeviceData,
			 DeviceDataHistory, DeviceAttribute and
			 DeviceAttributeHistory instances

		       - It is now possible to create a DeviceProxy instance
			 from the device alias name

		       - Command and Attribute names are case insensitive

		       - Change in parameters of some DeviceProxy class logging
			 methods

		       - Change in parameters of the DeviceProxy asynchronous
			 replies methods

		       - The asynchronous calls now support device_2 and device
			 IDL interfaces

	   	       - Bug fixes :
				- In reconnection algorithm
				- Memory leak in DeviceProxy constructor in case
				  of device not defined in database

- C++ server classes : - Attributes names are now stored in black-box

		       - Remove check if a class without any device defined in
			 database is embedded in a server

		       - Tango device server used as Win 2000 service does not
			 exit anymore at logoff

		       - Clarify message displayed when a server is not able to
			 connect to database

		       - New serialization model in device server

		       - Bug fixes :
				- No message when killing a DS with the admin
				  device kill command (Solaris only)
				- Some DevVarStringArray element printing
				  (Win32)
				- RestartServer admin command now start a thread
				  to do its job
				- In polling thread for heavily loaded servers
				  with command with a long response time


           *********************************************************
	       *                                                       *
           *    Tango release 3.0.0 : Changes since version 2.2.0  *
	       *                                                       *
	       *********************************************************
	       

- C++ client classes : - Added asynchronous calls to execute commands, 
			 read_attribute or write_attribute

		       - Added ApiUtil::cleanup method and destructors method

		       - Fix bug in the return value of the DeviceAttribute
			 class extraction methods when extracting data into
			 C++ vectors

- C++ server classes : - Added logging features

		       - The client host name is now stored in the
			 device black-box

		       - Added three serialization models (by device, by class
			 and by  process)

		       - Change the way how TangoMonitor was implemented

		       - The "always_executed_hook" method is now also called
			 when getting the deice state or status as CORBA
			 attributes

		       - The date returned when reading attributes is now also
			 correct with Win32

- All C++ classes : - Ported to gcc 3.2.x

		    - Some internal cleanups

- Java server classes : - Minor bug fixes

- Java client classes : - Added asynchronous calls to execute commands, 
			  read_attribute or write_attribute


Changes since version 2.1.2
---------------------------

- C++ client classes : - Adapted to omniORB use

- C++ server classes : - Adapted to omniORB use

		       - Add a new get_device_list() method in the Util class

		       - Modified the Util::get_class_list() method
			 in order to takes the DServer class into account

		       - Modified the Util::get_device_by_name() method
			 in order to takes the DServer device into account

		       - Modified the Util::get_device_list_by_class mrthod
			 to take into account the DServer device.

		       - Added a new parameter to the Attribute::set_value()
			 methods to ask CORBA to free memory allocated for 
			 the attribute

- Java server classes : - Adapted to JacORB use

- Java client classes : - Adapted to JacORB use

			- Update of the Database.delete_device_attribute_property
			  and Database.delete_class_attribute_property methods.

			- Added a DeviceProxy.set_transparency_reconnection() and
			  DeviceProxy.get_transparency_reconnection() methods

			- Added a -DTANGO_TIMEOUT option for client timeout on 
			  the java interpreter command line

			- Merge of the three Tango packages (Tango, TangoDs and
			  TangoApi) and the CORBA classes within the same
			  jar file called TangORB.jar

Changes since version 2.1.1
---------------------------

- C++ client classes : - Fix bug in data extraction from the DeviceAttribute 
			 class when the read_attributes call was local to the
			 process

		       - Add re-connection to the set_timeout() DeviceProxy
			 class method

		       - Fix bug when device is marked as non-exported in the
			 database during DeviceProxy class constructor

- C++ server classes : - Fix bug which allows concurrent access between state
			 or status when requested as CORBA attributes and
			 any commands or attributes

		       - Add a string with library release number called
			 "TgLibVers" (Also available for clients)

Changes since version 2.1.0
---------------------------

- C++ client classes : - Fix bug in DeviceProxy::write_attributes() method which
			 prevent writing more than one attribute in one call

- C++ server classes : - Fix bug in polling algorithm. In some condition, the 
			 polling thread enters an infinite loop.

		       - Fix bug for Win32 device when trying to set
			 attribute config

		       - Remove HP-UX specific code in source files


Changes since version 2.0.2
---------------------------

- C++ client classes : - Support all Tango device name syntax (using TANGO_HOST
			 environment variable, without environment variable but
			 with database server parameters specified in device 
			 name and non database device)

		       - Database object managed as a singleton per control 
			 system

		       - No more data copy during command_inout or
			 read_attribute calls

		       - Support all Tango device IDL interface release 2
			 features (data/attributes read from polling buffer,
			 commmand/attribute result history, polling related
			 methods added to the DeviceProxy class)

		       - Build an exception class hierarchy for exception 
			 thrown by these classes

		       - Add management of device time-out

		       - Added some missing methods (copy constructor, 
			 assignement operator...)

- C++ server classes : - Kernel classes reference documentation now generated
			 using doxygen instead of doc++

		       - A little file added to the library which summarizes
			 version number. The RCS/CVS "ident" command will now
			 tells you that release library x.y.z is composed
			 by C++ client classes set release a.b and C++ server
			 classes set release c.d

		       - Fix incorrect field setting for DevFailed exception
			 re-thrown from a CORBA exception

		       - It's now not possible to poll the Init command

		       - It's now possible to define a default class doc. per 
			 control system instance (using property)

		       - The test done to check if attribute value has been
			 set before it is returned to caller is done only if the
			 attribute quality is set to VALID

		       - The JTCInitialize object is now stored in the Util 
			 class

		       - Windows : The Tango master include file (tango.h) now
			 also include winsock.h


Changes since version 2.0.0
---------------------------

- C++ client classes : - Fix bug in Database::delete_device_attribute_property()
			 method. This method now allows deleting device attribute
			 property for one device at a time

- C++ server classes : - For writable attribute: When writing new value, the
			  check done between this new value and the attribute
			  property min_value or max_value is not strict anymore
			  (only < or > instead of <= or >=)

			- It's now possible to reset an attribute property
			  value to its "unspecified value" by sending it the
			  "NaN" string.

			- For attribute with a min_alarm or max_alarm property
			  defined : If the attribute quality factor is set to 
			  INVALID, the attribute value will not be checked 
			  against the alarm level during default state or status
			  command.

Changes since version 1.6
-------------------------

- Supported OS :  - Suse 7.2 (and above) with gcc 2.95.3
	          - Solaris 7 with its Natif compiler (Forte C++ 6 Update 2)
		  - Windows NT with VC++ 6
		  Note that HP-UX is not supported any more and solaris with
		  gcc also (Waiting for gcc 3.1) 
		  
- ORB : ORBacus 4.1.1 is used (All OS)

- C++ client classes : - More insertors and extractors operators in the 
			 DeviceData class
			 
		       - Added support for attributes
		       
		       - Minor changes for compatibility with the Java classes
		         client set
		   
- C++ server classes : - A polling thread is created within each device server
			 (See documentation for all details about polling)
			 
		       - The documentation has been re-organized
		       
		       - A full library versionning is used
		       
		       - Implemented commands name do not start with Devxxx
		         (DevState is now State, DevStatus is Status...)
			 
		       - Option -h,-?,-help for each device server
		       
		       - Command name, attribute name and device server name are
		         now case sensitive name
			 
		       - The POA Manager is now activated earlier in server
		         startup sequence allowing command_inout call in the
			 init_device method
			 
		       - A new Init command automatically added to all devices
		         (like the State and Status command)
			 
		       - No more exception when the list of supported attributes
		         is requested to a device without attribute. The
			 sequence length is set to 0.
			 
		       - The always_executed_hook method is now executed once
		         during the read_attributes and write_attributes CORBA
			 calls
			 
		       - The default class documentation URL has been modified
		         and it is now possible to define one default value per
			 Tango control system installation
			 
		       - The -d option for Tango device server used as Windows
		         service is now replaced by a -dbg option
			 
		       - Fix bug which could prevent a Tango device server used
		         as Windows service to start



Changes since version 1.5
-------------------------

- DS API : Fix bug in the DeviceImpl class add_attribute() method

- DS API : Command and attributes now support a command display types. This is
	   used by the future Tango Application Toolkit for generic display
	   software

- DS API : Now, with two new options (-nodb and -dlist), it is possible to run a
	   Tango device server without a database server. Obviously, some Tango
	   device server features are lost if these options are used (See doc
	   for more details)

- DS API : Windows NT specific :
	  - To use the operator between sequence and vector, it is now necessary
	    to add a "using namespace Tango;" line in your source code
	  - A window is now displayed if device creation failed
	  - Tango has been generated as a DLL. 
	    WARNING : This is only for client. Some work is still necessary 
	    for server.

- DB and DEV API : Re-connection now fully operational

- DB and DEV API : Correct management of exception.

- Java specific
---------------


- DSAPI : Change the db call used to get device server class list to
	  DbGetDserverClassList

- DEV API : Add attribute management

Changes since version 1.4
-------------------------

- Client API classes added to the library

- New re_throw_exception() methods in the Except class

- Read_attributes now support "AllAttr" as attribute name to read all 
  attributes value within a single call

- Add a add_attribute() method to the DeviceImpl class to dynamically
  add attribute to the device attribute list

- New way to define attribute properties
    1 - From a Tango lib default value (lowest priority)
    2 - From user default value (with a new class called UserDefaultAttrProp)
    3 - From the database (highest priority)

- A new "pattern" to prevent full re-compile of C++ servers when new data
  members are added to classes used by programmer

- For multi-classes device server, it is now possible to use the
  Util::get_device_by_name() method in the device constructor

- Added "<<" operator overloading functions between DevVarxxxArray
  types and C++ vector

- Added "<<" operator overloading functions between DevVarxxxArray types
  and ostream (for easy printing)

- Correct print of exception data members when device constructor throw
  exception during device server startup sequence

Changes since version 1.3
-------------------------

- Fix bug in the Tango::DServer::restart() method preventing a correct device
  restart
  
- Fix a bug in the Tango::Util::get_device_by_name() method preventing the
  method to find the correct device in the device server device list

Changes since version 1.2
-------------------------

- The Tango lib now include the user classes to easily access the Tango
  database

- For linux : Add the possibility to have the signal handler executed in the
  calling thread (instead of the signal management thread)
  
- For linux : Change the way how a server is killed in order to also destroy
  user thread(s)
  
- Add a new CORBA attribute in the Tango IDL definition to retrieve the name
  of the administration device associated to the server hosting the device
  
- Change the DevRestart command philosophy. It is not any more a command 
  automatically added to every device but a command on the device server
  administration device (with device name to be restarted as input parameter).
  A command to restart the whole device server has also been added to this 
  administration device.
  
Changes since version 1.1
-------------------------

- Fix bug in the Tango::MultiClassAttribute::init_class_attributes() method

- Remove database specific error codes

Changes since the Tango alpha release (installed as version 1.1)
----------------------------------------------------------------

- Support CORBA 2.3

- Everything in a Tango namespace (C++ specific)

- Remove all assert from library (C++ specific)

- Main attributes properties (format, type, name..) now hard-coded in user
  code
  
- Change in the DevFailed exception definition

- Complete new handling of signals. Now, all servers are automatically threaded
  and one thread is dedicated to signal handling. This allow user code to
  do what they want in signal handler
  
- All exceptions related methods are now grouped in a "Except" class

- New method to generate DevFailed exception from a CORBA exception

- Change name of the main include file (tango.h instead of tango_ds.h)

- DevRestart now delete and completely re-create device. The client has to
  reconnect.
  
- Server can start even if the database server is not there (for the starter
  device server)
  
- Include and lib directories re-organized

- Tango device server running on NT may now run as NT service

- Add a completely new graphical user interface for device server running on
  Windows NT
